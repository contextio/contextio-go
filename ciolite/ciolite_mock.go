// Code generated by MockGen. DO NOT EDIT.
// Source: ciolite.go

// Package ciolite is a generated GoMock package.
package ciolite

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ValidateCallback mocks base method
func (m *MockInterface) ValidateCallback(token, signature string, timestamp int) bool {
	ret := m.ctrl.Call(m, "ValidateCallback", token, signature, timestamp)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateCallback indicates an expected call of ValidateCallback
func (mr *MockInterfaceMockRecorder) ValidateCallback(token, signature, timestamp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCallback", reflect.TypeOf((*MockInterface)(nil).ValidateCallback), token, signature, timestamp)
}

// GetStatusCallbackURL mocks base method
func (m *MockInterface) GetStatusCallbackURL() (GetStatusCallbackURLResponse, error) {
	ret := m.ctrl.Call(m, "GetStatusCallbackURL")
	ret0, _ := ret[0].(GetStatusCallbackURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusCallbackURL indicates an expected call of GetStatusCallbackURL
func (mr *MockInterfaceMockRecorder) GetStatusCallbackURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCallbackURL", reflect.TypeOf((*MockInterface)(nil).GetStatusCallbackURL))
}

// CreateStatusCallbackURL mocks base method
func (m *MockInterface) CreateStatusCallbackURL(formValues CreateStatusCallbackURLParams) (CreateDeleteStatusCallbackURLResponse, error) {
	ret := m.ctrl.Call(m, "CreateStatusCallbackURL", formValues)
	ret0, _ := ret[0].(CreateDeleteStatusCallbackURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatusCallbackURL indicates an expected call of CreateStatusCallbackURL
func (mr *MockInterfaceMockRecorder) CreateStatusCallbackURL(formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatusCallbackURL", reflect.TypeOf((*MockInterface)(nil).CreateStatusCallbackURL), formValues)
}

// DeleteStatusCallbackURL mocks base method
func (m *MockInterface) DeleteStatusCallbackURL() (CreateDeleteStatusCallbackURLResponse, error) {
	ret := m.ctrl.Call(m, "DeleteStatusCallbackURL")
	ret0, _ := ret[0].(CreateDeleteStatusCallbackURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStatusCallbackURL indicates an expected call of DeleteStatusCallbackURL
func (mr *MockInterfaceMockRecorder) DeleteStatusCallbackURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatusCallbackURL", reflect.TypeOf((*MockInterface)(nil).DeleteStatusCallbackURL))
}

// GetConnectTokens mocks base method
func (m *MockInterface) GetConnectTokens() ([]GetConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "GetConnectTokens")
	ret0, _ := ret[0].([]GetConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectTokens indicates an expected call of GetConnectTokens
func (mr *MockInterfaceMockRecorder) GetConnectTokens() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectTokens", reflect.TypeOf((*MockInterface)(nil).GetConnectTokens))
}

// GetConnectToken mocks base method
func (m *MockInterface) GetConnectToken(token string) (GetConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "GetConnectToken", token)
	ret0, _ := ret[0].(GetConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectToken indicates an expected call of GetConnectToken
func (mr *MockInterfaceMockRecorder) GetConnectToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectToken", reflect.TypeOf((*MockInterface)(nil).GetConnectToken), token)
}

// CreateConnectToken mocks base method
func (m *MockInterface) CreateConnectToken(formValues CreateConnectTokenParams) (CreateConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "CreateConnectToken", formValues)
	ret0, _ := ret[0].(CreateConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectToken indicates an expected call of CreateConnectToken
func (mr *MockInterfaceMockRecorder) CreateConnectToken(formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectToken", reflect.TypeOf((*MockInterface)(nil).CreateConnectToken), formValues)
}

// DeleteConnectToken mocks base method
func (m *MockInterface) DeleteConnectToken(token string) (DeleteConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "DeleteConnectToken", token)
	ret0, _ := ret[0].(DeleteConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectToken indicates an expected call of DeleteConnectToken
func (mr *MockInterfaceMockRecorder) DeleteConnectToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectToken", reflect.TypeOf((*MockInterface)(nil).DeleteConnectToken), token)
}

// CheckConnectToken mocks base method
func (m *MockInterface) CheckConnectToken(connectToken GetConnectTokenResponse, email string) error {
	ret := m.ctrl.Call(m, "CheckConnectToken", connectToken, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConnectToken indicates an expected call of CheckConnectToken
func (mr *MockInterfaceMockRecorder) CheckConnectToken(connectToken, email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnectToken", reflect.TypeOf((*MockInterface)(nil).CheckConnectToken), connectToken, email)
}

// GetDiscovery mocks base method
func (m *MockInterface) GetDiscovery(queryValues GetDiscoveryParams) (GetDiscoveryResponse, error) {
	ret := m.ctrl.Call(m, "GetDiscovery", queryValues)
	ret0, _ := ret[0].(GetDiscoveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscovery indicates an expected call of GetDiscovery
func (mr *MockInterfaceMockRecorder) GetDiscovery(queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscovery", reflect.TypeOf((*MockInterface)(nil).GetDiscovery), queryValues)
}

// GetOAuthProviders mocks base method
func (m *MockInterface) GetOAuthProviders() ([]GetOAuthProvidersResponse, error) {
	ret := m.ctrl.Call(m, "GetOAuthProviders")
	ret0, _ := ret[0].([]GetOAuthProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthProviders indicates an expected call of GetOAuthProviders
func (mr *MockInterfaceMockRecorder) GetOAuthProviders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthProviders", reflect.TypeOf((*MockInterface)(nil).GetOAuthProviders))
}

// GetOAuthProvider mocks base method
func (m *MockInterface) GetOAuthProvider(key string) (GetOAuthProvidersResponse, error) {
	ret := m.ctrl.Call(m, "GetOAuthProvider", key)
	ret0, _ := ret[0].(GetOAuthProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthProvider indicates an expected call of GetOAuthProvider
func (mr *MockInterfaceMockRecorder) GetOAuthProvider(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthProvider", reflect.TypeOf((*MockInterface)(nil).GetOAuthProvider), key)
}

// CreateOAuthProvider mocks base method
func (m *MockInterface) CreateOAuthProvider(formValues CreateOAuthProviderParams) (CreateOAuthProviderResponse, error) {
	ret := m.ctrl.Call(m, "CreateOAuthProvider", formValues)
	ret0, _ := ret[0].(CreateOAuthProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuthProvider indicates an expected call of CreateOAuthProvider
func (mr *MockInterfaceMockRecorder) CreateOAuthProvider(formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthProvider", reflect.TypeOf((*MockInterface)(nil).CreateOAuthProvider), formValues)
}

// DeleteOAuthProvider mocks base method
func (m *MockInterface) DeleteOAuthProvider(key string) (DeleteOAuthProviderResponse, error) {
	ret := m.ctrl.Call(m, "DeleteOAuthProvider", key)
	ret0, _ := ret[0].(DeleteOAuthProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOAuthProvider indicates an expected call of DeleteOAuthProvider
func (mr *MockInterfaceMockRecorder) DeleteOAuthProvider(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthProvider", reflect.TypeOf((*MockInterface)(nil).DeleteOAuthProvider), key)
}

// GetUserConnectTokens mocks base method
func (m *MockInterface) GetUserConnectTokens(userID string) ([]GetConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "GetUserConnectTokens", userID)
	ret0, _ := ret[0].([]GetConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConnectTokens indicates an expected call of GetUserConnectTokens
func (mr *MockInterfaceMockRecorder) GetUserConnectTokens(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConnectTokens", reflect.TypeOf((*MockInterface)(nil).GetUserConnectTokens), userID)
}

// GetUserConnectToken mocks base method
func (m *MockInterface) GetUserConnectToken(userID, token string) (GetConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "GetUserConnectToken", userID, token)
	ret0, _ := ret[0].(GetConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConnectToken indicates an expected call of GetUserConnectToken
func (mr *MockInterfaceMockRecorder) GetUserConnectToken(userID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConnectToken", reflect.TypeOf((*MockInterface)(nil).GetUserConnectToken), userID, token)
}

// CreateUserConnectToken mocks base method
func (m *MockInterface) CreateUserConnectToken(userID string, formValues CreateConnectTokenParams) (CreateConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "CreateUserConnectToken", userID, formValues)
	ret0, _ := ret[0].(CreateConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserConnectToken indicates an expected call of CreateUserConnectToken
func (mr *MockInterfaceMockRecorder) CreateUserConnectToken(userID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserConnectToken", reflect.TypeOf((*MockInterface)(nil).CreateUserConnectToken), userID, formValues)
}

// DeleteUserConnectToken mocks base method
func (m *MockInterface) DeleteUserConnectToken(userID, token string) (DeleteConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "DeleteUserConnectToken", userID, token)
	ret0, _ := ret[0].(DeleteConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserConnectToken indicates an expected call of DeleteUserConnectToken
func (mr *MockInterfaceMockRecorder) DeleteUserConnectToken(userID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConnectToken", reflect.TypeOf((*MockInterface)(nil).DeleteUserConnectToken), userID, token)
}

// GetUserEmailAccountConnectTokens mocks base method
func (m *MockInterface) GetUserEmailAccountConnectTokens(userID, label string) ([]GetConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountConnectTokens", userID, label)
	ret0, _ := ret[0].([]GetConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountConnectTokens indicates an expected call of GetUserEmailAccountConnectTokens
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountConnectTokens(userID, label interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountConnectTokens", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountConnectTokens), userID, label)
}

// GetUserEmailAccountConnectToken mocks base method
func (m *MockInterface) GetUserEmailAccountConnectToken(userID, label, token string) (GetConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountConnectToken", userID, label, token)
	ret0, _ := ret[0].(GetConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountConnectToken indicates an expected call of GetUserEmailAccountConnectToken
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountConnectToken(userID, label, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountConnectToken", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountConnectToken), userID, label, token)
}

// CreateUserEmailAccountConnectToken mocks base method
func (m *MockInterface) CreateUserEmailAccountConnectToken(userID, label string, formValues CreateConnectTokenParams) (CreateConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "CreateUserEmailAccountConnectToken", userID, label, formValues)
	ret0, _ := ret[0].(CreateConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserEmailAccountConnectToken indicates an expected call of CreateUserEmailAccountConnectToken
func (mr *MockInterfaceMockRecorder) CreateUserEmailAccountConnectToken(userID, label, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEmailAccountConnectToken", reflect.TypeOf((*MockInterface)(nil).CreateUserEmailAccountConnectToken), userID, label, formValues)
}

// DeleteUserEmailAccountConnectToken mocks base method
func (m *MockInterface) DeleteUserEmailAccountConnectToken(userID, label, token string) (DeleteConnectTokenResponse, error) {
	ret := m.ctrl.Call(m, "DeleteUserEmailAccountConnectToken", userID, label, token)
	ret0, _ := ret[0].(DeleteConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserEmailAccountConnectToken indicates an expected call of DeleteUserEmailAccountConnectToken
func (mr *MockInterfaceMockRecorder) DeleteUserEmailAccountConnectToken(userID, label, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserEmailAccountConnectToken", reflect.TypeOf((*MockInterface)(nil).DeleteUserEmailAccountConnectToken), userID, label, token)
}

// GetUserEmailAccountsFolderMessageAttachments mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessageAttachments(userID, label, folder, messageID string, queryValues EmailAccountFolderDelimiterParam) ([]GetUserEmailAccountsFolderMessageAttachmentsResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessageAttachments", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].([]GetUserEmailAccountsFolderMessageAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessageAttachments indicates an expected call of GetUserEmailAccountsFolderMessageAttachments
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessageAttachments(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessageAttachments", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessageAttachments), userID, label, folder, messageID, queryValues)
}

// GetUserEmailAccountsFolderMessageAttachment mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessageAttachment(userID, label, folder, messageID, attachmentID string, queryValues GetUserEmailAccountsFolderMessageAttachmentParam) (GetUserEmailAccountsFolderMessageAttachmentsResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessageAttachment", userID, label, folder, messageID, attachmentID, queryValues)
	ret0, _ := ret[0].(GetUserEmailAccountsFolderMessageAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessageAttachment indicates an expected call of GetUserEmailAccountsFolderMessageAttachment
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessageAttachment(userID, label, folder, messageID, attachmentID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessageAttachment", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessageAttachment), userID, label, folder, messageID, attachmentID, queryValues)
}

// GetUserEmailAccountsFolderMessageBody mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessageBody(userID, label, folder, messageID string, queryValues GetUserEmailAccountsFolderMessageBodyParams) ([]GetUserEmailAccountsFolderMessageBodyResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessageBody", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].([]GetUserEmailAccountsFolderMessageBodyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessageBody indicates an expected call of GetUserEmailAccountsFolderMessageBody
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessageBody(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessageBody", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessageBody), userID, label, folder, messageID, queryValues)
}

// GetUserEmailAccountsFolderMessageFlags mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessageFlags(userID, label, folder, messageID string, queryValues EmailAccountFolderDelimiterParam) (GetUserEmailAccountsFolderMessageFlagsResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessageFlags", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].(GetUserEmailAccountsFolderMessageFlagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessageFlags indicates an expected call of GetUserEmailAccountsFolderMessageFlags
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessageFlags(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessageFlags", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessageFlags), userID, label, folder, messageID, queryValues)
}

// GetUserEmailAccountsFolderMessageHeaders mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessageHeaders(userID, label, folder, messageID string, queryValues GetUserEmailAccountsFolderMessageHeadersParams) (GetUserEmailAccountsFolderMessageHeadersResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessageHeaders", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].(GetUserEmailAccountsFolderMessageHeadersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessageHeaders indicates an expected call of GetUserEmailAccountsFolderMessageHeaders
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessageHeaders(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessageHeaders", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessageHeaders), userID, label, folder, messageID, queryValues)
}

// GetUserEmailAccountsFolderMessageRaw mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessageRaw(userID, label, folder, messageID string, queryValues EmailAccountFolderDelimiterParam) (GetUserEmailAccountsFolderMessageRawResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessageRaw", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].(GetUserEmailAccountsFolderMessageRawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessageRaw indicates an expected call of GetUserEmailAccountsFolderMessageRaw
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessageRaw(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessageRaw", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessageRaw), userID, label, folder, messageID, queryValues)
}

// MarkUserEmailAccountsFolderMessageRead mocks base method
func (m *MockInterface) MarkUserEmailAccountsFolderMessageRead(userID, label, folder, messageID string, formValues EmailAccountFolderDelimiterParam) (UserEmailAccountsFolderMessageReadResponse, error) {
	ret := m.ctrl.Call(m, "MarkUserEmailAccountsFolderMessageRead", userID, label, folder, messageID, formValues)
	ret0, _ := ret[0].(UserEmailAccountsFolderMessageReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkUserEmailAccountsFolderMessageRead indicates an expected call of MarkUserEmailAccountsFolderMessageRead
func (mr *MockInterfaceMockRecorder) MarkUserEmailAccountsFolderMessageRead(userID, label, folder, messageID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUserEmailAccountsFolderMessageRead", reflect.TypeOf((*MockInterface)(nil).MarkUserEmailAccountsFolderMessageRead), userID, label, folder, messageID, formValues)
}

// MarkUserEmailAccountsFolderMessageUnRead mocks base method
func (m *MockInterface) MarkUserEmailAccountsFolderMessageUnRead(userID, label, folder, messageID string, formValues EmailAccountFolderDelimiterParam) (UserEmailAccountsFolderMessageReadResponse, error) {
	ret := m.ctrl.Call(m, "MarkUserEmailAccountsFolderMessageUnRead", userID, label, folder, messageID, formValues)
	ret0, _ := ret[0].(UserEmailAccountsFolderMessageReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkUserEmailAccountsFolderMessageUnRead indicates an expected call of MarkUserEmailAccountsFolderMessageUnRead
func (mr *MockInterfaceMockRecorder) MarkUserEmailAccountsFolderMessageUnRead(userID, label, folder, messageID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUserEmailAccountsFolderMessageUnRead", reflect.TypeOf((*MockInterface)(nil).MarkUserEmailAccountsFolderMessageUnRead), userID, label, folder, messageID, formValues)
}

// GetUserEmailAccountsFolderMessages mocks base method
func (m *MockInterface) GetUserEmailAccountsFolderMessages(userID, label, folder string, queryValues GetUserEmailAccountsFolderMessageParams) ([]GetUsersEmailAccountFolderMessagesResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolderMessages", userID, label, folder, queryValues)
	ret0, _ := ret[0].([]GetUsersEmailAccountFolderMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolderMessages indicates an expected call of GetUserEmailAccountsFolderMessages
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolderMessages(userID, label, folder, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolderMessages", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolderMessages), userID, label, folder, queryValues)
}

// GetUserEmailAccountFolderMessage mocks base method
func (m *MockInterface) GetUserEmailAccountFolderMessage(userID, label, folder, messageID string, queryValues GetUserEmailAccountsFolderMessageParams) (GetUsersEmailAccountFolderMessagesResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountFolderMessage", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].(GetUsersEmailAccountFolderMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountFolderMessage indicates an expected call of GetUserEmailAccountFolderMessage
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountFolderMessage(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountFolderMessage", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountFolderMessage), userID, label, folder, messageID, queryValues)
}

// MoveUserEmailAccountFolderMessage mocks base method
func (m *MockInterface) MoveUserEmailAccountFolderMessage(userID, label, folder, messageID string, queryValues MoveUserEmailAccountFolderMessageParams) (MoveUserEmailAccountFolderMessageResponse, error) {
	ret := m.ctrl.Call(m, "MoveUserEmailAccountFolderMessage", userID, label, folder, messageID, queryValues)
	ret0, _ := ret[0].(MoveUserEmailAccountFolderMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveUserEmailAccountFolderMessage indicates an expected call of MoveUserEmailAccountFolderMessage
func (mr *MockInterfaceMockRecorder) MoveUserEmailAccountFolderMessage(userID, label, folder, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveUserEmailAccountFolderMessage", reflect.TypeOf((*MockInterface)(nil).MoveUserEmailAccountFolderMessage), userID, label, folder, messageID, queryValues)
}

// GetUserEmailAccountsFolders mocks base method
func (m *MockInterface) GetUserEmailAccountsFolders(userID, label string, queryValues GetUserEmailAccountsFoldersParams) ([]GetUsersEmailAccountFoldersResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsFolders", userID, label, queryValues)
	ret0, _ := ret[0].([]GetUsersEmailAccountFoldersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsFolders indicates an expected call of GetUserEmailAccountsFolders
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsFolders(userID, label, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsFolders", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsFolders), userID, label, queryValues)
}

// GetUserEmailAccountFolder mocks base method
func (m *MockInterface) GetUserEmailAccountFolder(userID, label, folder string, queryValues EmailAccountFolderDelimiterParam) (GetUsersEmailAccountFoldersResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountFolder", userID, label, folder, queryValues)
	ret0, _ := ret[0].(GetUsersEmailAccountFoldersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountFolder indicates an expected call of GetUserEmailAccountFolder
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountFolder(userID, label, folder, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountFolder", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountFolder), userID, label, folder, queryValues)
}

// CreateUserEmailAccountFolder mocks base method
func (m *MockInterface) CreateUserEmailAccountFolder(userID, label, folder string, formValues EmailAccountFolderDelimiterParam) (CreateEmailAccountFolderResponse, error) {
	ret := m.ctrl.Call(m, "CreateUserEmailAccountFolder", userID, label, folder, formValues)
	ret0, _ := ret[0].(CreateEmailAccountFolderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserEmailAccountFolder indicates an expected call of CreateUserEmailAccountFolder
func (mr *MockInterfaceMockRecorder) CreateUserEmailAccountFolder(userID, label, folder, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEmailAccountFolder", reflect.TypeOf((*MockInterface)(nil).CreateUserEmailAccountFolder), userID, label, folder, formValues)
}

// SafeCreateUserEmailAccountFolder mocks base method
func (m *MockInterface) SafeCreateUserEmailAccountFolder(userID, label, folder string, formValues EmailAccountFolderDelimiterParam) (bool, error) {
	ret := m.ctrl.Call(m, "SafeCreateUserEmailAccountFolder", userID, label, folder, formValues)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeCreateUserEmailAccountFolder indicates an expected call of SafeCreateUserEmailAccountFolder
func (mr *MockInterfaceMockRecorder) SafeCreateUserEmailAccountFolder(userID, label, folder, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeCreateUserEmailAccountFolder", reflect.TypeOf((*MockInterface)(nil).SafeCreateUserEmailAccountFolder), userID, label, folder, formValues)
}

// GetUserEmailAccountsMessages mocks base method
func (m *MockInterface) GetUserEmailAccountsMessages(userID, label string, queryValues GetUserEmailAccountsMessageParams) ([]GetUsersEmailAccountMessagesResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountsMessages", userID, label, queryValues)
	ret0, _ := ret[0].([]GetUsersEmailAccountMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountsMessages indicates an expected call of GetUserEmailAccountsMessages
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountsMessages(userID, label, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountsMessages", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountsMessages), userID, label, queryValues)
}

// GetUserEmailAccountMessage mocks base method
func (m *MockInterface) GetUserEmailAccountMessage(userID, label, messageID string, queryValues GetUserEmailAccountsMessageParams) (GetUsersEmailAccountMessagesResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccountMessage", userID, label, messageID, queryValues)
	ret0, _ := ret[0].(GetUsersEmailAccountMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccountMessage indicates an expected call of GetUserEmailAccountMessage
func (mr *MockInterfaceMockRecorder) GetUserEmailAccountMessage(userID, label, messageID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccountMessage", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccountMessage), userID, label, messageID, queryValues)
}

// GetUserEmailAccounts mocks base method
func (m *MockInterface) GetUserEmailAccounts(userID string, queryValues GetUserEmailAccountsParams) ([]GetUsersEmailAccountsResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccounts", userID, queryValues)
	ret0, _ := ret[0].([]GetUsersEmailAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccounts indicates an expected call of GetUserEmailAccounts
func (mr *MockInterfaceMockRecorder) GetUserEmailAccounts(userID, queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccounts", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccounts), userID, queryValues)
}

// GetUserEmailAccount mocks base method
func (m *MockInterface) GetUserEmailAccount(userID, label string) (GetUsersEmailAccountsResponse, error) {
	ret := m.ctrl.Call(m, "GetUserEmailAccount", userID, label)
	ret0, _ := ret[0].(GetUsersEmailAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailAccount indicates an expected call of GetUserEmailAccount
func (mr *MockInterfaceMockRecorder) GetUserEmailAccount(userID, label interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailAccount", reflect.TypeOf((*MockInterface)(nil).GetUserEmailAccount), userID, label)
}

// CreateUserEmailAccount mocks base method
func (m *MockInterface) CreateUserEmailAccount(userID string, formValues CreateUserParams) (CreateEmailAccountResponse, error) {
	ret := m.ctrl.Call(m, "CreateUserEmailAccount", userID, formValues)
	ret0, _ := ret[0].(CreateEmailAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserEmailAccount indicates an expected call of CreateUserEmailAccount
func (mr *MockInterfaceMockRecorder) CreateUserEmailAccount(userID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEmailAccount", reflect.TypeOf((*MockInterface)(nil).CreateUserEmailAccount), userID, formValues)
}

// ModifyUserEmailAccount mocks base method
func (m *MockInterface) ModifyUserEmailAccount(userID, label string, formValues ModifyUserEmailAccountParams) (ModifyEmailAccountResponse, error) {
	ret := m.ctrl.Call(m, "ModifyUserEmailAccount", userID, label, formValues)
	ret0, _ := ret[0].(ModifyEmailAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUserEmailAccount indicates an expected call of ModifyUserEmailAccount
func (mr *MockInterfaceMockRecorder) ModifyUserEmailAccount(userID, label, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUserEmailAccount", reflect.TypeOf((*MockInterface)(nil).ModifyUserEmailAccount), userID, label, formValues)
}

// DeleteUserEmailAccount mocks base method
func (m *MockInterface) DeleteUserEmailAccount(userID, label string) (DeleteEmailAccountResponse, error) {
	ret := m.ctrl.Call(m, "DeleteUserEmailAccount", userID, label)
	ret0, _ := ret[0].(DeleteEmailAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserEmailAccount indicates an expected call of DeleteUserEmailAccount
func (mr *MockInterfaceMockRecorder) DeleteUserEmailAccount(userID, label interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserEmailAccount", reflect.TypeOf((*MockInterface)(nil).DeleteUserEmailAccount), userID, label)
}

// GetUserWebhooks mocks base method
func (m *MockInterface) GetUserWebhooks(userID string) ([]GetUsersWebhooksResponse, error) {
	ret := m.ctrl.Call(m, "GetUserWebhooks", userID)
	ret0, _ := ret[0].([]GetUsersWebhooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWebhooks indicates an expected call of GetUserWebhooks
func (mr *MockInterfaceMockRecorder) GetUserWebhooks(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWebhooks", reflect.TypeOf((*MockInterface)(nil).GetUserWebhooks), userID)
}

// GetUserWebhook mocks base method
func (m *MockInterface) GetUserWebhook(userID, webhookID string) (GetUsersWebhooksResponse, error) {
	ret := m.ctrl.Call(m, "GetUserWebhook", userID, webhookID)
	ret0, _ := ret[0].(GetUsersWebhooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWebhook indicates an expected call of GetUserWebhook
func (mr *MockInterfaceMockRecorder) GetUserWebhook(userID, webhookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWebhook", reflect.TypeOf((*MockInterface)(nil).GetUserWebhook), userID, webhookID)
}

// CreateUserWebhook mocks base method
func (m *MockInterface) CreateUserWebhook(userID string, formValues CreateUserWebhookParams) (CreateUserWebhookResponse, error) {
	ret := m.ctrl.Call(m, "CreateUserWebhook", userID, formValues)
	ret0, _ := ret[0].(CreateUserWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWebhook indicates an expected call of CreateUserWebhook
func (mr *MockInterfaceMockRecorder) CreateUserWebhook(userID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWebhook", reflect.TypeOf((*MockInterface)(nil).CreateUserWebhook), userID, formValues)
}

// ModifyUserWebhook mocks base method
func (m *MockInterface) ModifyUserWebhook(userID, webhookID string, formValues ModifyUserWebhookParams) (ModifyWebhookResponse, error) {
	ret := m.ctrl.Call(m, "ModifyUserWebhook", userID, webhookID, formValues)
	ret0, _ := ret[0].(ModifyWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUserWebhook indicates an expected call of ModifyUserWebhook
func (mr *MockInterfaceMockRecorder) ModifyUserWebhook(userID, webhookID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUserWebhook", reflect.TypeOf((*MockInterface)(nil).ModifyUserWebhook), userID, webhookID, formValues)
}

// DeleteUserWebhookAccount mocks base method
func (m *MockInterface) DeleteUserWebhookAccount(userID, webhookID string) (DeleteWebhookResponse, error) {
	ret := m.ctrl.Call(m, "DeleteUserWebhookAccount", userID, webhookID)
	ret0, _ := ret[0].(DeleteWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWebhookAccount indicates an expected call of DeleteUserWebhookAccount
func (mr *MockInterfaceMockRecorder) DeleteUserWebhookAccount(userID, webhookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWebhookAccount", reflect.TypeOf((*MockInterface)(nil).DeleteUserWebhookAccount), userID, webhookID)
}

// GetUsers mocks base method
func (m *MockInterface) GetUsers(queryValues GetUsersParams) ([]GetUsersResponse, error) {
	ret := m.ctrl.Call(m, "GetUsers", queryValues)
	ret0, _ := ret[0].([]GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockInterfaceMockRecorder) GetUsers(queryValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockInterface)(nil).GetUsers), queryValues)
}

// GetUser mocks base method
func (m *MockInterface) GetUser(userID string) (GetUsersResponse, error) {
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockInterfaceMockRecorder) GetUser(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockInterface)(nil).GetUser), userID)
}

// CreateUser mocks base method
func (m *MockInterface) CreateUser(formValues CreateUserParams) (CreateUserResponse, error) {
	ret := m.ctrl.Call(m, "CreateUser", formValues)
	ret0, _ := ret[0].(CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockInterfaceMockRecorder) CreateUser(formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockInterface)(nil).CreateUser), formValues)
}

// ModifyUser mocks base method
func (m *MockInterface) ModifyUser(userID string, formValues ModifyUserParams) (ModifyUserResponse, error) {
	ret := m.ctrl.Call(m, "ModifyUser", userID, formValues)
	ret0, _ := ret[0].(ModifyUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUser indicates an expected call of ModifyUser
func (mr *MockInterfaceMockRecorder) ModifyUser(userID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUser", reflect.TypeOf((*MockInterface)(nil).ModifyUser), userID, formValues)
}

// DeleteUser mocks base method
func (m *MockInterface) DeleteUser(userID string) (DeleteUserResponse, error) {
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockInterfaceMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockInterface)(nil).DeleteUser), userID)
}

// GetWebhooks mocks base method
func (m *MockInterface) GetWebhooks() ([]GetUsersWebhooksResponse, error) {
	ret := m.ctrl.Call(m, "GetWebhooks")
	ret0, _ := ret[0].([]GetUsersWebhooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhooks indicates an expected call of GetWebhooks
func (mr *MockInterfaceMockRecorder) GetWebhooks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhooks", reflect.TypeOf((*MockInterface)(nil).GetWebhooks))
}

// GetWebhook mocks base method
func (m *MockInterface) GetWebhook(webhookID string) (GetUsersWebhooksResponse, error) {
	ret := m.ctrl.Call(m, "GetWebhook", webhookID)
	ret0, _ := ret[0].(GetUsersWebhooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook
func (mr *MockInterfaceMockRecorder) GetWebhook(webhookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockInterface)(nil).GetWebhook), webhookID)
}

// CreateWebhook mocks base method
func (m *MockInterface) CreateWebhook(formValues CreateUserWebhookParams) (CreateUserWebhookResponse, error) {
	ret := m.ctrl.Call(m, "CreateWebhook", formValues)
	ret0, _ := ret[0].(CreateUserWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook
func (mr *MockInterfaceMockRecorder) CreateWebhook(formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockInterface)(nil).CreateWebhook), formValues)
}

// ModifyWebhook mocks base method
func (m *MockInterface) ModifyWebhook(webhookID string, formValues ModifyUserWebhookParams) (ModifyWebhookResponse, error) {
	ret := m.ctrl.Call(m, "ModifyWebhook", webhookID, formValues)
	ret0, _ := ret[0].(ModifyWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWebhook indicates an expected call of ModifyWebhook
func (mr *MockInterfaceMockRecorder) ModifyWebhook(webhookID, formValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWebhook", reflect.TypeOf((*MockInterface)(nil).ModifyWebhook), webhookID, formValues)
}

// DeleteWebhookAccount mocks base method
func (m *MockInterface) DeleteWebhookAccount(webhookID string) (DeleteWebhookResponse, error) {
	ret := m.ctrl.Call(m, "DeleteWebhookAccount", webhookID)
	ret0, _ := ret[0].(DeleteWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebhookAccount indicates an expected call of DeleteWebhookAccount
func (mr *MockInterfaceMockRecorder) DeleteWebhookAccount(webhookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookAccount", reflect.TypeOf((*MockInterface)(nil).DeleteWebhookAccount), webhookID)
}
